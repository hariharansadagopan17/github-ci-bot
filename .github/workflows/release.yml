name: Release Pipeline

on:
  workflow_dispatch:
    inputs:
      artifact_id:
        description: 'Unique artifact identifier'
        required: true
        type: string
        default: 'manual-trigger'
  push:
    branches: [ main, master ]

env:
  ARTIFACT_ID: ${{ inputs.artifact_id || github.run_id }}
  NODE_VERSION: '18'

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      artifact_id: ${{ env.ARTIFACT_ID }}
      build_status: ${{ steps.build.outcome }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: |
        echo "Installing dependencies for artifact: $ARTIFACT_ID"
        npm ci
    
    - name: Run linting
      run: |
        echo "Running linters..."
        # npm run lint
    
    - name: Run tests
      run: |
        echo "Running tests..."
        # npm test
    
    - name: Build application
      id: build
      run: |
        echo "Building application..."
        mkdir -p dist
        echo "Built with artifact ID: $ARTIFACT_ID" > dist/build-info.txt
        echo "Build timestamp: $(date)" >> dist/build-info.txt
        # npm run build
    
    - name: Create artifact
      run: |
        echo "Creating release artifact..."
        tar -czf "release-$ARTIFACT_ID.tar.gz" dist/
        ls -la release-*.tar.gz
    
    - name: Upload build artifact
      uses: actions/upload-artifact@v4
      with:
        name: release-${{ env.ARTIFACT_ID }}
        path: release-${{ env.ARTIFACT_ID }}.tar.gz
        retention-days: 30
    
    - name: Notify bot of build completion
      if: always()
      run: |
        echo "Notifying bot of build completion..."
        curl -X POST "${{ secrets.BOT_WEBHOOK_URL || 'http://localhost:3000/webhook' }}" \
          -H "Content-Type: application/json" \
          -H "X-GitHub-Event: workflow_job" \
          -d '{
            "action": "completed",
            "workflow_job": {
              "name": "build",
              "conclusion": "${{ job.status }}",
              "completed_at": "${{ github.event.head_commit.timestamp }}"
            },
            "repository": {
              "full_name": "${{ github.repository }}",
              "owner": {
                "login": "${{ github.repository_owner }}"
              },
              "name": "${{ github.event.repository.name }}"
            }
          }' || echo "Bot notification failed (this is normal in development)"

  test:
    runs-on: ubuntu-latest
    needs: build
    if: success()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
    
    - name: Download build artifact
      uses: actions/download-artifact@v4
      with:
        name: release-${{ needs.build.outputs.artifact_id }}
    
    - name: Run integration tests
      run: |
        echo "Running integration tests for artifact: ${{ needs.build.outputs.artifact_id }}"
        ls -la
        # Add your integration tests here

  deploy:
    runs-on: ubuntu-latest
    needs: [build, test]
    if: success() && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    environment: production
    
    steps:
    - name: Download build artifact
      uses: actions/download-artifact@v4
      with:
        name: release-${{ needs.build.outputs.artifact_id }}
    
    - name: Extract artifact
      run: |
        echo "Extracting artifact: ${{ needs.build.outputs.artifact_id }}"
        tar -xzf release-${{ needs.build.outputs.artifact_id }}.tar.gz
        cat dist/build-info.txt
    
    - name: Deploy to production
      run: |
        echo "üöÄ Deploying artifact: ${{ needs.build.outputs.artifact_id }} to production"
        echo "Deployment timestamp: $(date)"
        # Add your deployment commands here
        # kubectl apply -f k8s/
        # docker push your-registry/app:${{ needs.build.outputs.artifact_id }}
    
    - name: Health check
      run: |
        echo "Performing health check..."
        # curl -f https://your-app.com/health || exit 1
    
    - name: Notify bot of deployment
      if: always()
      run: |
        curl -X POST "${{ secrets.BOT_WEBHOOK_URL || 'http://localhost:3000/webhook' }}" \
          -H "Content-Type: application/json" \
          -H "X-GitHub-Event: workflow_run" \
          -d '{
            "action": "completed",
            "workflow_run": {
              "id": "${{ github.run_id }}",
              "name": "Release Pipeline",
              "conclusion": "${{ job.status }}",
              "status": "completed",
              "html_url": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
            },
            "repository": {
              "full_name": "${{ github.repository }}",
              "owner": {
                "login": "${{ github.repository_owner }}"
              },
              "name": "${{ github.event.repository.name }}"
            }
          }' || echo "Bot notification failed"

  notify:
    runs-on: ubuntu-latest
    needs: [build, test, deploy]
    if: always()
    
    steps:
    - name: Notify completion
      run: |
        if [[ "${{ needs.deploy.result }}" == "success" ]]; then
          echo "‚úÖ Pipeline completed successfully!"
          echo "Artifact ID: ${{ needs.build.outputs.artifact_id }}"
        else
          echo "‚ùå Pipeline failed. Check logs for details."
        fi
