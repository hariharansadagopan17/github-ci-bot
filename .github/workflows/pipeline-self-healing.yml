name: Pipeline Self-Healing and Recovery

on:
  workflow_run:
    workflows: ["Regression Tests CI/CD Pipeline"]
    types: [completed]
  schedule:
    # Run troubleshooter every 15 minutes
    - cron: '*/15 * * * *'
  workflow_dispatch:
    inputs:
      force_troubleshoot:
        description: 'Force troubleshooting of recent failures'
        required: false
        default: 'false'

jobs:
  troubleshoot-and-heal:
    runs-on: ubuntu-latest
    if: github.event.workflow_run.conclusion == 'failure' || github.event_name == 'schedule' || github.event.inputs.force_troubleshoot == 'true'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: RegressionTesting/package.json
    
    - name: Install troubleshooter dependencies
      run: |
        cd RegressionTesting
        npm install @octokit/rest axios winston
    
    - name: Run Pipeline Troubleshooter
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GITHUB_OWNER: ${{ github.repository_owner }}
        GITHUB_REPO: ${{ github.event.repository.name }}
        LOKI_URL: http://localhost:3100
      run: |
        cd RegressionTesting
        node pipeline-troubleshooter.js check
    
    - name: Check for auto-fixes
      id: check_fixes
      run: |
        if git diff --quiet; then
          echo "fixes_applied=false" >> $GITHUB_OUTPUT
        else
          echo "fixes_applied=true" >> $GITHUB_OUTPUT
        fi
    
    - name: Commit and push fixes
      if: steps.check_fixes.outputs.fixes_applied == 'true'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action Auto-Fix"
        git add .
        git commit -m "üîß Auto-fix: Pipeline troubleshooter applied automated fixes"
        git push
    
    - name: Trigger pipeline restart
      if: steps.check_fixes.outputs.fixes_applied == 'true'
      uses: actions/github-script@v7
      with:
        script: |
          const { owner, repo } = context.repo;
          
          // Get the latest workflow run ID for the main pipeline
          const workflows = await github.rest.actions.listWorkflowRunsForRepo({
            owner,
            repo,
            status: 'failure',
            per_page: 1
          });
          
          if (workflows.data.workflow_runs.length > 0) {
            const runId = workflows.data.workflow_runs[0].id;
            
            try {
              await github.rest.actions.reRunWorkflow({
                owner,
                repo,
                run_id: runId
              });
              
              console.log(`‚úÖ Successfully restarted pipeline: ${runId}`);
            } catch (error) {
              console.log(`‚ùå Failed to restart pipeline: ${error.message}`);
            }
          }
    
    - name: Create issue for manual intervention
      if: steps.check_fixes.outputs.fixes_applied == 'false' && github.event.workflow_run.conclusion == 'failure'
      uses: actions/github-script@v7
      with:
        script: |
          const { owner, repo } = context.repo;
          
          const title = `üîç Pipeline Failure Requires Manual Intervention`;
          const body = `
          ## Pipeline Failure Alert
          
          **Run ID:** ${{ github.event.workflow_run.id }}
          **Workflow:** ${{ github.event.workflow_run.name }}
          **Conclusion:** ${{ github.event.workflow_run.conclusion }}
          **Started:** ${{ github.event.workflow_run.created_at }}
          **Completed:** ${{ github.event.workflow_run.updated_at }}
          
          ### Troubleshooter Status
          ‚ùå No automated fix could be applied for this failure.
          
          ### Manual Investigation Required
          1. Check the [workflow run](${{ github.event.workflow_run.html_url }}) for detailed logs
          2. Review the [Grafana dashboard](${process.env.GRAFANA_URL || 'your-grafana-url'}) for additional context
          3. Check troubleshoot logs in the RegressionTesting/logs/ directory
          
          ### Common Manual Fixes
          - Check GitHub secrets configuration (KUBE_CONFIG)
          - Verify Kubernetes cluster accessibility
          - Review test environment setup
          - Check for dependency version conflicts
          
          ### Next Steps
          1. Investigate the root cause
          2. Apply manual fixes
          3. Close this issue once resolved
          4. Consider adding the fix pattern to the troubleshooter
          
          ---
          *This issue was created automatically by the Pipeline Self-Healing system.*
          `;
          
          // Check if similar issue already exists
          const existingIssues = await github.rest.issues.listForRepo({
            owner,
            repo,
            state: 'open',
            labels: 'pipeline-failure,auto-generated'
          });
          
          const hasOpenIssue = existingIssues.data.some(issue => 
            issue.title.includes('Pipeline Failure Requires Manual Intervention')
          );
          
          if (!hasOpenIssue) {
            await github.rest.issues.create({
              owner,
              repo,
              title,
              body,
              labels: ['pipeline-failure', 'auto-generated', 'needs-investigation']
            });
            
            console.log('‚úÖ Created manual intervention issue');
          } else {
            console.log('‚ÑπÔ∏è Manual intervention issue already exists');
          }

  notify-teams:
    runs-on: ubuntu-latest
    needs: troubleshoot-and-heal
    if: always()
    
    steps:
    - name: Notify team of pipeline status
      uses: actions/github-script@v7
      with:
        script: |
          const status = '${{ needs.troubleshoot-and-heal.result }}';
          const runUrl = '${{ github.event.workflow_run.html_url }}';
          
          let message = '';
          let color = '';
          
          if (status === 'success') {
            message = '‚úÖ Pipeline troubleshooter ran successfully';
            color = 'good';
          } else {
            message = '‚ùå Pipeline troubleshooter encountered issues';
            color = 'danger';
          }
          
          console.log(`${message} - Check details at: ${runUrl}`);
          
          // Here you could add Slack/Teams/Discord webhook notifications
          // Example webhook call would go here
